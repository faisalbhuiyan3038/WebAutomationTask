{"name": "test_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=131.0.6778.265)\nStacktrace:\n\tGetHandleVerifier [0x00A5FD53+23747]\n\t(No symbol) [0x009E7D54]\n\t(No symbol) [0x008BBE53]\n\t(No symbol) [0x008B9CAE]\n\t(No symbol) [0x008AD918]\n\t(No symbol) [0x008AF210]\n\t(No symbol) [0x008ADB67]\n\t(No symbol) [0x008AD503]\n\t(No symbol) [0x008AD43D]\n\t(No symbol) [0x008AB8BB]\n\t(No symbol) [0x008ABE0B]\n\t(No symbol) [0x008BE84E]\n\t(No symbol) [0x0093BE47]\n\t(No symbol) [0x00921DFC]\n\t(No symbol) [0x0093B41E]\n\t(No symbol) [0x00921B96]\n\t(No symbol) [0x008F3F3C]\n\t(No symbol) [0x008F4EBD]\n\tGetHandleVerifier [0x00D3AC73+3017699]\n\tGetHandleVerifier [0x00D4B93B+3086507]\n\tGetHandleVerifier [0x00D440F2+3055714]\n\tGetHandleVerifier [0x00AF5AF0+637536]\n\t(No symbol) [0x009F0A5D]\n\t(No symbol) [0x009EDA28]\n\t(No symbol) [0x009EDBC5]\n\t(No symbol) [0x009E07F0]\n\tBaseThreadInitThunk [0x77267BA9+25]\n\tRtlInitializeExceptionChain [0x7770C0CB+107]\n\tRtlClearBits [0x7770C04F+191]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"63d1b8c154331bebf776ae3b24835999\")>\n\n    def test_search(driver):\n>       driver.get(\"https://gozayyan.com\")\n\ntests\\test_search.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000234199C0AD0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...dInitThunk [0x77267BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7770C0CB+107]\\\\n\\\\tRtlClearBits [0x7770C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=131.0.6778.265)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A5FD53+23747]\nE       \t(No symbol) [0x009E7D54]\nE       \t(No symbol) [0x008BBE53]\nE       \t(No symbol) [0x008B9CAE]\nE       \t(No symbol) [0x008AD918]\nE       \t(No symbol) [0x008AF210]\nE       \t(No symbol) [0x008ADB67]\nE       \t(No symbol) [0x008AD503]\nE       \t(No symbol) [0x008AD43D]\nE       \t(No symbol) [0x008AB8BB]\nE       \t(No symbol) [0x008ABE0B]\nE       \t(No symbol) [0x008BE84E]\nE       \t(No symbol) [0x0093BE47]\nE       \t(No symbol) [0x00921DFC]\nE       \t(No symbol) [0x0093B41E]\nE       \t(No symbol) [0x00921B96]\nE       \t(No symbol) [0x008F3F3C]\nE       \t(No symbol) [0x008F4EBD]\nE       \tGetHandleVerifier [0x00D3AC73+3017699]\nE       \tGetHandleVerifier [0x00D4B93B+3086507]\nE       \tGetHandleVerifier [0x00D440F2+3055714]\nE       \tGetHandleVerifier [0x00AF5AF0+637536]\nE       \t(No symbol) [0x009F0A5D]\nE       \t(No symbol) [0x009EDA28]\nE       \t(No symbol) [0x009EDBC5]\nE       \t(No symbol) [0x009E07F0]\nE       \tBaseThreadInitThunk [0x77267BA9+25]\nE       \tRtlInitializeExceptionChain [0x7770C0CB+107]\nE       \tRtlClearBits [0x7770C04F+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "start": 1736436250348, "stop": 1736436250658, "uuid": "a8be3528-42ff-48d3-a8c7-c82a7be8ab36", "historyId": "8c85d9efe15df9c4e49fd61a4b206ce7", "testCaseId": "8c85d9efe15df9c4e49fd61a4b206ce7", "fullName": "tests.test_search#test_search", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_search"}, {"name": "host", "value": "LifeSucks666"}, {"name": "thread", "value": "14424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_search"}]}