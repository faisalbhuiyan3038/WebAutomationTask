{"name": "test_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-74db6bba=\"\" type=\"button\" disabled=\"disabled\" class=\"btn adjust btn-link disabled\">...</button> is not clickable at point (925, 394). Other element would receive the click: <div data-v-74db6bba=\"\" class=\"input-container\">...</div>\n  (Session info: chrome=131.0.6778.265)\nStacktrace:\n\tGetHandleVerifier [0x0057FD53+23747]\n\t(No symbol) [0x00507D54]\n\t(No symbol) [0x003DBE53]\n\t(No symbol) [0x00425C57]\n\t(No symbol) [0x004240C3]\n\t(No symbol) [0x00421CCD]\n\t(No symbol) [0x00421034]\n\t(No symbol) [0x00415F57]\n\t(No symbol) [0x00441DFC]\n\t(No symbol) [0x004159A4]\n\t(No symbol) [0x00442094]\n\t(No symbol) [0x0045B41E]\n\t(No symbol) [0x00441B96]\n\t(No symbol) [0x00413F3C]\n\t(No symbol) [0x00414EBD]\n\tGetHandleVerifier [0x0085AC73+3017699]\n\tGetHandleVerifier [0x0086B93B+3086507]\n\tGetHandleVerifier [0x008640F2+3055714]\n\tGetHandleVerifier [0x00615AF0+637536]\n\t(No symbol) [0x00510A5D]\n\t(No symbol) [0x0050DA28]\n\t(No symbol) [0x0050DBC5]\n\t(No symbol) [0x005007F0]\n\tBaseThreadInitThunk [0x76337BA9+25]\n\tRtlInitializeExceptionChain [0x7759C0CB+107]\n\tRtlClearBits [0x7759C04F+191]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d3223c48b37e4364e67dcb108e5d041c\")>\n\n    def test_search(driver):\n        driver.get(\"https://www.google.com\")\n        # Wait for search box to be present and locate it\n        search_box = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.NAME, \"q\"))\n        )\n    \n        # Enter search term and submit\n        search_box.send_keys(\"Gozayyan\")\n        search_box.submit()\n    \n        # Wait for search results and click first link\n        first_result = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"div.g a\"))\n        )\n        first_result.click()\n    \n        # Wait a few seconds to see the result\n        time.sleep(5)\n    \n        home_page = HomePage(driver)\n        home_page.click_from_field()\n    \n        search_page = SearchPage(driver)\n        search_page.type_in_from_field(\"chitt\")\n        time.sleep(2)  # Wait for the suggestions to load\n        search_page.select_from_option()\n    \n        search_page.type_in_to_field(\"dhaka\")\n        time.sleep(2)  # Wait for the suggestions to load\n        search_page.select_to_option()\n    \n        search_page.click_traveler_field()\n>       search_page.increase_adults_count()\n\ntests\\test_search.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\search_page.py:32: in increase_adults_count\n    self.click_element(self.increase_adults)\npages\\base_page.py:17: in click_element\n    element.click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014F05368590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x76337BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7759C0CB+107]\\\\n\\\\tRtlClearBits [0x7759C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-74db6bba=\"\" type=\"button\" disabled=\"disabled\" class=\"btn adjust btn-link disabled\">...</button> is not clickable at point (925, 394). Other element would receive the click: <div data-v-74db6bba=\"\" class=\"input-container\">...</div>\nE         (Session info: chrome=131.0.6778.265)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0057FD53+23747]\nE       \t(No symbol) [0x00507D54]\nE       \t(No symbol) [0x003DBE53]\nE       \t(No symbol) [0x00425C57]\nE       \t(No symbol) [0x004240C3]\nE       \t(No symbol) [0x00421CCD]\nE       \t(No symbol) [0x00421034]\nE       \t(No symbol) [0x00415F57]\nE       \t(No symbol) [0x00441DFC]\nE       \t(No symbol) [0x004159A4]\nE       \t(No symbol) [0x00442094]\nE       \t(No symbol) [0x0045B41E]\nE       \t(No symbol) [0x00441B96]\nE       \t(No symbol) [0x00413F3C]\nE       \t(No symbol) [0x00414EBD]\nE       \tGetHandleVerifier [0x0085AC73+3017699]\nE       \tGetHandleVerifier [0x0086B93B+3086507]\nE       \tGetHandleVerifier [0x008640F2+3055714]\nE       \tGetHandleVerifier [0x00615AF0+637536]\nE       \t(No symbol) [0x00510A5D]\nE       \t(No symbol) [0x0050DA28]\nE       \t(No symbol) [0x0050DBC5]\nE       \t(No symbol) [0x005007F0]\nE       \tBaseThreadInitThunk [0x76337BA9+25]\nE       \tRtlInitializeExceptionChain [0x7759C0CB+107]\nE       \tRtlClearBits [0x7759C04F+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "start": 1736654574931, "stop": 1736654588957, "uuid": "bbd9d310-fd69-4da6-a4e3-f7915a48a2b6", "historyId": "8c85d9efe15df9c4e49fd61a4b206ce7", "testCaseId": "8c85d9efe15df9c4e49fd61a4b206ce7", "fullName": "tests.test_search#test_search", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_search"}, {"name": "host", "value": "LifeSucks666"}, {"name": "thread", "value": "12720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_search"}]}